class Node:
    def __init__(self, saturs, vecaks=None, mazais=None, lielais=None, limenis = 0):
        self.info = saturs
        self.parent = vecaks
        self.smaller = mazais
        self.bigger = lielais
        self.level = limenis
        return
    
    def read(self):
        print(f"dati: {self.info}, līmenis: {self.level}")
        return
    
class Koks:
    def __init__(self):
        self.sakne = None
        return
    
    def add(self, jaunais):
        if self.sakne == None:
            self.sakne = Node(jaunais)
            return
        limenis = 1
        vecaks = self.sakne
        if jaunais>vecaks.info:
            vieta = vecaks.bigger
        else:
            vieta = vecaks.smaller
        while vieta:
            limenis +=1
            vecaks = vieta
            if jaunais>vecaks.info:
                vieta = vecaks.bigger
            else:
                vieta = vecaks.smaller
        if jaunais>vecaks.info:
            vecaks.bigger = Node(jaunais, vecaks=vecaks, limenis=limenis)
        else:
            vecaks.smaller = Node(jaunais, vecaks=vecaks, limenis=limenis)
        return
    
    def read(self):
        if self.sakne == None:
            print("Kokā nav neviena elementa!")
            return
        elements = self.sakne
        # self.read(elements.bigger)
        self.read_ja_ir(elements)

    def read_ja_ir(self, elements):
        if elements == None:
            return
        elements.read()
        self.read_ja_ir(elements.smaller)
        self.read_ja_ir(elements.bigger)
        return
    
    def sort_list(self):
        sorted_list = []
        self.sort(self.sakne, sorted_list)
        return sorted_list
    
    def sort(self, node, sorted_list):
        if node == None:
            return
        # Traverse the left subtree
        self.sort(node.smaller, sorted_list)
        # Visit the current node
        sorted_list.append(node.info)
        # Traverse the right subtree
        self.sort(node.bigger, sorted_list)

    def search(self, value):
        # Start recursive search with the root node and level 1
        return self.search_recursive(self.sakne, value, 1)

    def search_recursive(self, node, value, level):
        if node is None:
            return None  # Value not found

        if node.info == value:
            return level  # If the value is found, return the level
        
        # Search in the left or right subtree based on the value
        if value < node.info:
            return self.search_recursive(node.smaller, value, level + 1)
        else:
            return self.search_recursive(node.bigger, value, level + 1)



def koks():
    koks = Koks()
    # Add elements to the tree
    for value in
        koks.add(value)  
    koks.read()

    print("\nSorted numbers:")
    sorted_numbers = koks.sort_list()
    print(sorted_numbers)

    value_to_find = 9995
    level = koks.search(value_to_find)
    if level == None:
        print(f"Value {value_to_find} not found in the tree")
    else:
        print(f"Value {value_to_find} is found at level {level-1}")

koks()